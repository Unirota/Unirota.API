name: Deploy to Amazon ECS Task

on:
  push:
    branches: [ "develop" ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: unirota/unirota-api
  ECS_CLUSTER: UnirotaApiCluster
  ECS_TASK_DEFINITION: .aws/UnirotaApiTaskDefinition-revision1.json
  CONTAINER_NAME: unirota-api-instance

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Build, tag, and push images to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build images defined in docker-compose.yml
        docker-compose -f docker-compose.yml build

        # Tag and push each service's image
        LATEST_IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker tag unirota/unirota-api:latest $LATEST_IMAGE_NAME
        docker push $LATEST_IMAGE_NAME
        echo "image=$LATEST_IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Stop Previous ECS Task
      run: |
        TASK_ARN=$(aws ecs list-tasks \
          --cluster ${{ env.ECS_CLUSTER }} \
          --query 'taskArns[0]' \
          --output text)
        if [ "$TASK_ARN" != "None" ]; then
          aws ecs stop-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task $TASK_ARN
        else
          echo "No previous task is running."
        fi

    - name: Run ECS Task
      run: |
        aws ecs run-task \
          --cluster ${{ env.ECS_CLUSTER }} \
          --task-definition UnirotaApiTaskDefinition \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[subnet-0e0c4c7e0611249da,subnet-01e41542a64d054f5,subnet-03613c8d7ae027761],securityGroups=[sg-097aedf3d458e9db8],assignPublicIp=ENABLED}" \
          --count 1
